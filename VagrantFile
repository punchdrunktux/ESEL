

Vagrant.configure("2") do |config|


  config.vm.define "kali" do |cfg|

    cfg.vm.synced_folder "~/dev/ESEL/SharedFiles", "/SharedFiles"
    cfg.vm.box = "kalilinux/rolling"
    cfg.vm.hostname = "kali"
    cfg.vm.provision :shell, path: "scripts/bootstrap_kali.sh"
    cfg.vm.network :private_network, ip: "10.1.1.15", gateway: "10.1.1.1", dns: "10.1.1.1"

    cfg.vm.provider "virtualbox" do |vb, override|
      vb.gui = true
      vb.name = "kali"
      vb.customize ["modifyvm", :id, "--memory", 4096]
      vb.customize ["modifyvm", :id, "--cpus", 2]
      vb.customize ["modifyvm", :id, "--vram", "128"]
      vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
      vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["setextradata", "global", "GUI/SuppressMessages", "all" ]
    end

    cfg.vm.provider "vmware_desktop" do |v, override|
      v.name = "Kali"
      v.vmx["displayname"] = "kali"
      v.memory = 4096
      v.cpus = 2
      v.gui = true
    end
end


  config.vm.define "ControlTower" do |cfg|

    cfg.vm.synced_folder "~/dev/ESEL/SharedFiles", "/SharedFiles"
    cfg.vm.box = "ubuntu/disco64"
    cfg.vm.hostname = "ControlTower"
    cfg.vm.provision :shell, path: "scripts/bootstrap_ct.sh"
    cfg.vm.network :private_network, ip: "10.1.1.10", gateway: "10.1.1.1", dns: "10.10.1.1"


    cfg.vm.provider "virtualbox" do |vb, override|
      vb.gui = true
      vb.name = "ControlTower"
      vb.customize ["modifyvm", :id, "--memory", 4096]
      vb.customize ["modifyvm", :id, "--cpus", 2]
      vb.customize ["modifyvm", :id, "--vram", "128"]
      vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
      vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["setextradata", "global", "GUI/SuppressMessages", "all" ]
    end

    cfg.vm.provider "vmware_desktop" do |v, override|
      v.name = "ControlTower"
      v.vmx["displayname"] = "ControlTower"
      v.memory = 4096
      v.cpus = 2
      v.gui = true
    end
end

  config.vm.define "win10-unprotected" do |cfg|
    cfg.vm.box = "kvasir-labs/windows10-clean"
    cfg.vm.hostname = "win10-unprotected"
    cfg.vm.boot_timeout = 1200
    cfg.vm.communicator = "winrm"
    cfg.winrm.basic_auth_only = true
    cfg.winrm.timeout = 1200
    cfg.winrm.retry_limit = 20
    cfg.vm.network :private_network, ip: "10.1.1.105", gateway: "10.1.1.1", dns: "10.1.1.1"

#    cfg.vm.provision "shell", path: "scripts/fix-second-network.ps1", privileged: false, args: "-ip 192.168.38.104 -dns 192.168.38.102"
#    cfg.vm.provision "shell", path: "scripts/MakeWindows10GreatAgain.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/provision.ps1", privileged: false
#    cfg.vm.provision "shell", inline: "cscript c:\\windows\\system32\\slmgr.vbs -rearm", privileged: false
#    cfg.vm.provision "reload"
#    cfg.vm.provision "shell", path: "scripts/provision.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/download_palantir_wef.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/download_palantir_osquery.ps1", privileged: false
#    cfg.vm.provision "shell", inline: 'wevtutil el | Select-String -notmatch "Microsoft-Windows-LiveId" | Foreach-Object {wevtutil cl "$_"}', privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-utilities.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-redteam.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-choco-extras.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-osquery.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-sysinternals.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-autorunstowineventlog.ps1", privileged: false

    cfg.vm.provider "vmware_desktop" do |v, override|
      v.vmx["displayname"] = "win10-unprotected"
      v.vmx["gui.fullscreenatpoweron"] = "FALSE"
      v.vmx["gui.viewModeAtPowerOn"] = "windowed"
      v.memory = 2048
      v.cpus = 1
      v.gui = true
      v.enable_vmrun_ip_lookup = false
    end

    cfg.vm.provider "virtualbox" do |vb, override|
      vb.gui = true
      vb.name = "win10-unprotected"
      vb.default_nic_type = "82545EM"
      vb.customize ["modifyvm", :id, "--memory", 2048]
      vb.customize ["modifyvm", :id, "--cpus", 1]
      vb.customize ["modifyvm", :id, "--vram", "32"]
      vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["setextradata", "global", "GUI/SuppressMessages", "all" ]
    end
  end

  config.vm.define "win10-ens" do |cfg|
    config.vm.box = "peru/windows-10-enterprise-x64-eval"
    config.vm.box_version = "20191203.01"
    cfg.vm.hostname = "win10-ens"
    cfg.vm.boot_timeout = 1200
    cfg.vm.communicator = "winrm"
    cfg.winrm.basic_auth_only = true
    cfg.winrm.timeout = 1200
    cfg.winrm.retry_limit = 20
    cfg.vm.network :private_network, ip: "10.1.1.105", gateway: "10.1.1.1", dns: "10.1.1.1"

#    cfg.vm.provision "shell", path: "scripts/fix-second-network.ps1", privileged: false, args: "-ip 192.168.38.104 -dns 192.168.38.102"
    cfg.vm.provision "shell", path: "scripts/MakeWindows10GreatAgain.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/provision.ps1", privileged: false
#    cfg.vm.provision "shell", inline: "cscript c:\\windows\\system32\\slmgr.vbs -rearm", privileged: false
#    cfg.vm.provision "reload"
#    cfg.vm.provision "shell", path: "scripts/provision.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/download_palantir_wef.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/download_palantir_osquery.ps1", privileged: false
#    cfg.vm.provision "shell", inline: 'wevtutil el | Select-String -notmatch "Microsoft-Windows-LiveId" | Foreach-Object {wevtutil cl "$_"}', privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-utilities.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-redteam.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-choco-extras.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-osquery.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-sysinternals.ps1", privileged: false
#    cfg.vm.provision "shell", path: "scripts/install-autorunstowineventlog.ps1", privileged: false

    cfg.vm.provider "vmware_desktop" do |v, override|
      v.vmx["displayname"] = "win10-ens"
      v.vmx["gui.fullscreenatpoweron"] = "FALSE"
      v.vmx["gui.viewModeAtPowerOn"] = "windowed"
      v.memory = 2048
      v.cpus = 1
      v.gui = true
      v.enable_vmrun_ip_lookup = false
    end

    cfg.vm.provider "virtualbox" do |vb, override|
      vb.gui = true
      vb.name = "win10-ens"
      vb.default_nic_type = "82545EM"
      vb.customize ["modifyvm", :id, "--memory", 2048]
      vb.customize ["modifyvm", :id, "--cpus", 1]
      vb.customize ["modifyvm", :id, "--vram", "32"]
      vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["setextradata", "global", "GUI/SuppressMessages", "all" ]
    end
  end
end
